-- ======================================================
-- ⚡ WALL FUNCTION - Transparent House + Lift Platform (Brainrot Safe)
-- ======================================================

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game:GetService("CoreGui")

local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0, 120, 0, 30) -- nhỏ hơn
ToggleButton.Position = UDim2.new(0.05, 0, 0.85, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Text = "WALL [OFF]"
ToggleButton.Name = "WALLToggleButton" -- đổi tên nút
ToggleButton.Parent = ScreenGui
ToggleButton.Active = true
ToggleButton.Draggable = true

-- Trạng thái
local enabled = false
local platform = nil
local originalTransparency = {}
local elevatorConn = nil
local extraLift = 2 -- số studs cho đầu xuyên trần

-- Hàm kiểm tra part có nên làm mờ
local function isHousePartTransparent(part)
    local model = part:FindFirstAncestorOfClass("Model")
    
    -- Trừ Brainrot / pet / item nhặt được
    if model then
        if model:FindFirstChild("HumanoidRootPart") then
            return false
        end
        for _, p in ipairs(model:GetDescendants()) do
            if p:IsA("MeshPart") then
                return false
            end
        end
    end
    if part:FindFirstChild("CanPickup") and part.CanPickup.Value == true then
        return false
    end

    -- Nếu part tên là "Roof", "Ceiling" hoặc part bình thường của nhà => cho mờ
    return true
end

-- Hàm bật
local function enableWall()
    enabled = true
    ToggleButton.Text = "WALL [ON]"
    ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0)

    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")
    local head = char:WaitForChild("Head")

    -- Làm mờ nhà, trừ Brainrot / pet / item
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and isHousePartTransparent(part) then
            originalTransparency[part] = part.Transparency
            part.LocalTransparencyModifier = 0.6
        end
    end

    -- Spawn bệ vàng dưới chân
    platform = Instance.new("Part")
    platform.Size = Vector3.new(6, 1, 6)
    platform.Anchored = true
    platform.Color = Color3.fromRGB(255, 220, 0)
    platform.Material = Enum.Material.Neon
    platform.CanCollide = true
    platform.CFrame = hrp.CFrame - Vector3.new(0, 4, 0)
    platform.Parent = workspace

    local stopY = nil

    -- Thang máy
    elevatorConn = RunService.RenderStepped:Connect(function()
        if not (char and hrp and head and platform) then return end

        if not stopY then
            local rayOrigin = head.Position
            local rayDirection = Vector3.new(0, 5, 0)
            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {char, platform}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

            local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)

            if result then
                stopY = platform.Position.Y + (result.Position.Y - head.Position.Y) + extraLift
            else
                platform.Position = platform.Position + Vector3.new(0, 0.2, 0)
            end
        else
            if platform.Position.Y < stopY then
                platform.Position = platform.Position + Vector3.new(0, 0.2, 0)
            end
        end
    end)
end

-- Hàm tắt
local function disableWall()
    enabled = false
    ToggleButton.Text = "WALL [OFF]"
    ToggleButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)

    for part, _ in pairs(originalTransparency) do
        if part and part.Parent then
            part.LocalTransparencyModifier = 0
        end
    end
    originalTransparency = {}

    if elevatorConn then
        elevatorConn:Disconnect()
        elevatorConn = nil
    end
    if platform then
        platform:Destroy()
        platform = nil
    end
end

-- Toggle GUI
ToggleButton.MouseButton1Click:Connect(function()
    if enabled then
        disableWall()
    else
        enableWall()
    end
end)

-- Toggle phím PC (RightShift)
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.RightShift then
        if enabled then
            disableWall()
        else
            enableWall()
        end
    end
end)

disableWall()
